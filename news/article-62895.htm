<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">


<head>
        <link rel="canonical" href="https://todayclashnode.github.io/news/article-62895.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>postman测试@pathvariable,@requestparam,@requestbody发送情况</title>
        <meta name="description" content="1、三种方式简单说明  1.1、@Pathvariable 通过占位符的方式获取入参，前端示例：url:http://localhost:8080/system/student/${stuSno} 也" />
        <link rel="icon" href="/assets/website/img/todayclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="TodayClashNode今日订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://todayclashnode.github.io/news/article-62895.htm" />
    <meta property="og:site_name" content="TodayClashNode今日订阅站" />
    <meta property="og:title" content="postman测试@pathvariable,@requestparam,@requestbody发送情况" />
    <meta property="og:image" content="https://todayclashnode.github.io/uploads/20240614/8bdb01ab8b97b13e240530425d8e8c33.webp" />
        <meta property="og:release_date" content="2025-02-25T05:00:49" />
    <meta property="og:updated_time" content="2025-02-25T05:00:49" />
        <meta property="og:description" content="1、三种方式简单说明  1.1、@Pathvariable 通过占位符的方式获取入参，前端示例：url:http://localhost:8080/system/student/${stuSno} 也" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="postman测试@pathvariable,@requestparam,@requestbody发送情况">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PB8VLG2G25"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-PB8VLG2G25');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                <a href="/" class="navbar-brand">
                                <span>
                    Today ClashNode                </span>
                                </a>

                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/client.htm" class="nav-link">客户端</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/news/" class="nav-link">新闻资讯</a></li>
                                            </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>postman测试@pathvariable,@requestparam,@requestbody发送情况</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/" class="animsition-link">新闻资讯</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> </h1> <h2> <a id="1_1" rel="nofollow"></a>1、三种方式简单说明</h2> <h3> <a id="11Pathvariable_2" rel="nofollow"></a>1.1、@Pathvariable</h3> <p>通过占位符的方式获取入参，前端示例：url:http://localhost:8080/system/student/${stuSno}<br /> 也即是从路径里面去获取变量<br /> 后端：</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @param stuSno 学号      * @return 学生信息      * @description 根据主键获取学生信息      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey/{stuSno}"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>这种情况是方法参数名称和需要绑定的url中变量名称一致时<br /> 若是若方法参数名称和需要绑定的url中变量名称不一致时<br /> 后端：</p> <pre><code class="prism language-java"><span class="token comment">/**  * @param stuSno 学号  * @return 学生信息  * @description 根据主键获取学生信息  */</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey/{stuSno}"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"stuSno"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> sno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <blockquote> <p><strong>注意：前端传参的URL于后端@RequestMapping的URL必须相同且参数位置一一对应，否则前端会找不到后端地址</strong></p> </blockquote> <h3> <a id="12RequestParam_35" rel="nofollow"></a>1.2、@RequestParam</h3> <ol> <li>作用<br /> 将请求参数绑定在控制层（controller）方法参数【springmvc注解】</li> <li>语法</li> </ol> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"参数名"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token string">"true/false"</span><span class="token punctuation">,</span><span class="token keyword">default</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/8521444aecbaf8b6b05a315e35d7682c.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <p><strong>value</strong>:表示前端传过来的值名称，如果你不设置，那就默认使用服务端使用的参数名称（stuSno）<br /> 不设置：<br /> 前端：<img decoding="async" src="http://img.555519.xyz/uploads/20230112/75b722103ecc4a8ee26491260ac82dd4.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span>student<span class="token operator">/</span>selectByPrimaryKey1<span class="token operator">?</span>stuSno<span class="token operator">=</span><span class="token number">0001</span> </code></pre> <p>后端：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/8b1c2324ef69bd672e6c0df5270c160f.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> </code></pre> <p>设置<br /> 前端：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/f0bb0f98f0f08db7eacb20c7d8457969.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span>student<span class="token operator">/</span>selectByPrimaryKey1<span class="token operator">?</span>sno<span class="token operator">=</span><span class="token number">0001</span> </code></pre> <p>后端：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/5c7a0b232d820ca838f7bb93e6e614e7.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><br /> 此时@requestParam中value=“sno” value可以省略 直接输入“sno”，类似于@RequestMapping</p> <pre><code class="prism language-java">    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"sno"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> </code></pre> <p>这时候前端传sno并非stuSno，需要在@requestParam中value设置sno<br /><strong>required</strong>:是否包含该参数，默认为true,表示该请求路径中必须包含该参数，如果不包含就报错<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/485b405403ae9126d679bba098ba7fba.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">30.495</span>  WARN <span class="token number">4736</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8081</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>m<span class="token punctuation">.</span>s<span class="token punctuation">.</span>DefaultHandlerExceptionResolver <span class="token operator">:</span> <span class="token class-name">Resolved</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span>MissingServletRequestParameterException</span><span class="token operator">:</span> <span class="token class-name">Required</span> request parameter <span class="token string">'sno'</span> <span class="token keyword">for</span> method parameter type <span class="token class-name">String</span> is not present<span class="token punctuation">]</span>  </code></pre> <p>defaultValue:默认参数值，如果设置了该值，required=true将失效，自动变为false,如果没有传该参数，使用默认值；比如说此时 后端直接写成 defaultValue=“0001”<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/af6dd54a10e7fa1ca3ef2649c4ff8c03.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><img decoding="async" src="http://img.555519.xyz/uploads/20230112/d8ced868634306fa6751687019037908.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="4"> <li>示例说明<br /> 后端controller</li> </ol> <pre><code class="prism language-java">    <span class="token comment">/**      * @param stuSno 学号      * @return 学生信息      * @description 根据主键获取学生信息      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"sno"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"0001"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>前端暂时使用 postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/54d8cbf4ecac48239228fcb7551fb757.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <h3> <a id="13RequestBody_103" rel="nofollow"></a>1.3、@RequestBody</h3> <p>@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)</p> <ol> <li>@RequestBody直接以String接收前端传过来的json数据<br /> 后端代码</li> </ol> <pre><code class="prism language-java">    <span class="token comment">/**      * @param stuSno 学号      * @return 学生信息      * @description 根据主键获取学生信息      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey3"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> jsonString<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">// 使用fastjson解析json格式字符串为json对象</span>         <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取学号</span>         <span class="token class-name">String</span> stuSno <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"stuSno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>前端postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/4bd59d5712dbfd210b346a247436a736.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><br /> 需要通过fastjson转换json字符串为json对象从而获取相应的值，否则报错<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/de09b31589d88d71de8f1d867b6c0856.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="3"> <li>@RequestBody以简单对象接收前端传过来的json数据<br /> 实体类</li> </ol> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>geekmice<span class="token punctuation">.</span>springbootrequestparam<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonFormat</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">private</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> stuName<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> stuBorn<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> stuSex<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuSno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuSno<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuSno</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuSno <span class="token operator">=</span> stuSno<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuName</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuName<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuName <span class="token operator">=</span> stuName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuBorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuBorn<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuBorn</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuBorn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuBorn <span class="token operator">=</span> stuBorn<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuSex<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuSex<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuSex <span class="token operator">=</span> stuSex<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                 <span class="token string">"stuSno='"</span> <span class="token operator">+</span> stuSno <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">", stuName='"</span> <span class="token operator">+</span> stuName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">", stuBorn='"</span> <span class="token operator">+</span> stuBorn <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">", stuSex='"</span> <span class="token operator">+</span> stuSex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">'}'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <p>dao层</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @param student 学生信息      * @return 返回学生信息      * @description 根据学生对象获取学生信息      */</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <p>xml</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>获取学生信息<span class="token operator">--</span><span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectByPrimaryKeySelective"</span> resultType<span class="token operator">=</span><span class="token string">"student"</span> parameterType<span class="token operator">=</span><span class="token string">"student"</span><span class="token operator">&gt;</span>         select         <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">&gt;</span>         from student         <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">&gt;</span></span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuSno != '' and stuSno != null"</span><span class="token operator">&gt;</span>                 stu_sno <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuSno<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuName != '' and stuName != null"</span><span class="token operator">&gt;</span>                 and stu_name <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuName<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuBorn != '' and stuBorn != null"</span><span class="token operator">&gt;</span>                 and stu_born <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuBorn<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuSex != '' and stuSex != null"</span><span class="token operator">&gt;</span>                 and stu_sex <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuSex<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span> </code></pre> <p>service</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @description 根据学生对象获取学生信息      * @param student 学生信息      * @return 返回学生信息      */</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentDao<span class="token punctuation">.</span><span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>controller</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @param student 学生对象      * @return 获取对应学生信息      * @description 用户选择获取对应的学生信息      */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKeySelective"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>postman效果<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/87a343aef6770bc15dda483bc60ad6c0.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="5"> <li>@RequestBody以复杂对象接收前端传过来的json数据<br /> 复杂对象：Tim</li> </ol> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>geekmice<span class="token punctuation">.</span>springbootrequestparam<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>  <span class="token comment">/**  * @author pmb  * @create 2021-08-15-4:34  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tim</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 团队id</span>     <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>      <span class="token comment">// 团队名字</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> timName<span class="token punctuation">;</span>      <span class="token comment">// 获得荣誉</span>     <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> honors<span class="token punctuation">;</span>      <span class="token comment">// 团队成员</span>     <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentList<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTimName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> timName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimName</span><span class="token punctuation">(</span><span class="token class-name">String</span> timName<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>timName <span class="token operator">=</span> timName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHonors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> honors<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHonors</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> honors<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>honors <span class="token operator">=</span> honors<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentList<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>studentList <span class="token operator">=</span> studentList<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">StringBuffer</span> stringHonor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"荣誉开始：。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> honors<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             stringHonor<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>             stringHonor<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token class-name">StringBuffer</span> stringTim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"团队成员开始：。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             stringTim<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>             stringTim<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         stringHonor<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringTim<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> stringHonor<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/84186cbce37d385b0fbf6d992a1d5d69.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><br /> postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/f1d667b173a0a458c85d3b588cbf9adb.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="7"> <li>@RequestBody与简单的@RequestParam()同时使用</li> </ol> <p>controller<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/44c1e6e6fa0ba163d9f8aa6a5b1a3257.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <p>postman<img decoding="async" src="http://img.555519.xyz/uploads/20230112/2de7f6dab46008d2190307cf308401c7.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="9"> <li>@RequestBody与复杂的@RequestParam()同时使用<br /> controller<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/eaee56bfb1f7ea4807ecbbaadcac1850.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"> </li> </ol> <p>postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/153e5f950d2d7570cdbacb4c73b6ba22.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="11"> <li>@RequestBody接收请求体中的json数据；不加注解接收URL中的数据并组装为对象<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/4164e152198e45e714283e6a4a58e348.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"> </li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/49eda6151396d9f048c1e5aec4022397.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <h2> <a id="3_358" rel="nofollow"></a>3、不同之处&amp;应用场景</h2> <p>我认为在单个参数提交 API 获取信息的时候，直接放在 URL 地址里，也就是使用 URI 模板的方式是非常方便的，而不使用 @PathVariable 还需要从 request 里提取指定参数，多一步操作，所以如果提取的是多个参数，而且是多个不同类型的参数，我觉得应该使用其他方式，也就是 @RequestParam</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/b9af90f848c3dac86e222513bd0fbc22.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-62295.htm">动物疫苗查询系统怎么查（动物疫苗查询系统怎么查）</a></p>
                                        <p>下一个：<a href="/news/article-62896.htm">动物防疫疫苗种类有哪些名称图片（动物疫苗接种途径有哪些）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-13-free-subscribe-node.htm" title="「1月13日」最高速度22.8M/S，2025年V2ray/Shadowrocket/SSR/Clash每天更新免费机场订阅链接">「1月13日」最高速度22.8M/S，2025年V2ray/Shadowrocket/SSR/Clash每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-16-clash-node-daily-updates.htm" title="「11月16日」最高速度20.8M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费机场订阅链接">「11月16日」最高速度20.8M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-1-clash-windows.htm" title="「2月1日」最高速度19.1M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费机场订阅链接">「2月1日」最高速度19.1M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-23-free-shadowrocket-node.htm" title="「2月23日」最高速度21.7M/S，2025年Shadowrocket/V2ray/SSR/Clash每天更新免费机场订阅链接">「2月23日」最高速度21.7M/S，2025年Shadowrocket/V2ray/SSR/Clash每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-free-clash.htm" title="「12月7日」最高速度21.7M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费机场订阅链接">「12月7日」最高速度21.7M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-33805.htm" title="郑州哪里有批发狗粮的（郑州狗粮生产厂家的地址）">郑州哪里有批发狗粮的（郑州狗粮生产厂家的地址）</a></li>
                        <li class="py-2"><a href="/news/article-30942.htm" title="深入理解 Go 中的字符串_Golang">深入理解 Go 中的字符串_Golang</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-8-free-v2ray.htm" title="「2月8日」最高速度20M/S，2025年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅链接">「2月8日」最高速度20M/S，2025年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-51636.htm" title="动物诊疗许可证的有效期（动物诊疗许可证有效期及依据）">动物诊疗许可证的有效期（动物诊疗许可证有效期及依据）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-free-v2ray.htm" title="「1月7日」最高速度22.6M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费机场订阅链接">「1月7日」最高速度22.6M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费机场订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">81</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p class="copyrights-text mb-3 mb-lg-0">
                          TodayClashNode今日订阅站 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/website/js/frontend/todayclashnode/jquery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/website/js/frontend/todayclashnode/lightbox2/js/lightbox.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/front.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>
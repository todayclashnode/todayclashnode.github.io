<!DOCTYPE html>
<html lang="zh-CN">


<head>
        <link rel="canonical" href="https://todayclashnode.github.io/news/article-22108.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Python自学笔记（三）深入理解Python变量的数据类型和存储</title>
        <meta name="description" content="  我们知道，python的变量是有类型的，对于python变量的几种数据类型，我们在写python时是必须要有一定的概念的。知道数据类型就要知道变量数据类型怎么存储，可是为什么python的变量不需" />
        <link rel="icon" href="/assets/website/img/todayclashnode/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="__ADDON__/js/frontend/todayclashnode/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="__ADDON__/js/frontend/todayclashnode/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="__ADDON__/js/frontend/todayclashnode/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PB8VLG2G25"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-PB8VLG2G25');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Today ClashNode
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/news/" class="nav-link">新闻资讯</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>Python自学笔记（三）深入理解Python变量的数据类型和存储</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/" class="animsition-link">新闻资讯</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night-eighties"> <p><font color="#999AAA">  我们知道，python的变量是有类型的，对于python变量的几种数据类型，我们在写python时是必须要有一定的概念的。知道数据类型就要知道变量数据类型怎么存储，可是为什么python的变量不需要声明数据类型就可以直接赋值？变量如果有数据类型，那变量不是可以为任意数据类型？那真正的数据类型如int在内存存储的字节大小应该为多少？等等诸如一系列的问题让我提起了的兴趣，经过网上不断查找学习后，在此将我所了解到的内容在此做个总结归纳。<br /></font></p> <hr color="#000000" size="1&quot;"/> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_7" rel="nofollow">一、变量的数据类型</a></li> <li> <ul> <li><a href="#1_8" rel="nofollow">1、什么是变量的数据类型</a></li> <li><a href="#2python_13" rel="nofollow">2、python五大标准数据类型</a></li> </ul> </li> <li><a href="#python_75" rel="nofollow">二、python变量的存储</a></li> <li> <ul> <li><a href="#1_76" rel="nofollow">1、变量与储存地址的关系</a></li> <li><a href="#2_111" rel="nofollow">2、复杂数据类型的存储方式</a></li> <li><a href="#3_140" rel="nofollow">3、变量的赋值——浅拷贝和深拷贝</a></li> </ul> </li> <li><a href="#python_202" rel="nofollow">三、python变量数据类型的大小</a></li> <li><a href="#_236" rel="nofollow">总结</a></li> </ul> </div> </h1> <h2> <a id="1_8" rel="nofollow"></a>1、什么是变量的数据类型</h2> <p>  我们先捋一捋什么是<strong>变量</strong>，变量从字面上理解就是可以变化的量，我们可以随时改变这个变量的值，使得我们可以调用同一个变量而获得不同的值，与之对应的是<strong>常量</strong>。那么对于一个可变的变量，它有可能表示是一个字符串，一个数字或者是一个小数，因为这些在计算机内存里存放的方式是不一样的，所以<strong>简单理解就是变量的数据类型不同就是对应的数据在计算机内存中存放方式的不同</strong>。这种方式表现在按多少字节存储，是否连续存储等。<br />   我们都知道，c是<strong>静态类型语言</strong>，一种在编译期间就确定数据类型的语言，也就是我们需要对变量先声明其数据类型后才能使用，并且在使用过程中一般不能赋值一些超过该数据类型数值，比如：int a = 1.2，当然大类型是可以转向小类型的，如：double a = 1 （double类型接收整形数值）。可以肯定的，大多数静态类型语言都这么干。<br />   当然，python语言也有数据类型。但python语言不同，它是一种<strong>动态类型语言</strong>，又是强类型语言。它们确定一个变量的数据类型是在你第一次给它赋值的时候，也就是说你赋值给变量什么数据类型的数值，变量就是什么数据类型的。<strong>所以，对比之下，c语言变量的数据类型是事先定义的，而python是后天接受的</strong>。</p> <h2> <a id="2python_13" rel="nofollow"></a>2、python五大标准数据类型</h2> <p>  在讲变量存储之前，这里先简单总结下python的五大标准数据类型，为了方便展示，我们采用type方法显示变量的数据类型。</p> <p>（1）Numbers（数字）<br />   数字数据类型用于存储数值。他们是不可改变的数据类型，可简单分为以下四种：（注意这里十六进制，八进制都属于int整形。）<br /> int（整型）：</p> <pre><code class="prism language-python">var <span class="token operator">=</span> <span class="token number">520</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>     	 <span class="token comment"># &lt;class 'int'&gt;</span> </code></pre> <p>float（浮点型）：</p> <pre><code class="prism language-python">var <span class="token operator">=</span> <span class="token number">5.20</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>     	 <span class="token comment"># 输出：&lt;class 'float'&gt;</span> </code></pre> <p>bool（布尔型）：</p> <pre><code class="prism language-python">var <span class="token operator">=</span> true <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 输出：&lt;class 'bool'&gt;</span> </code></pre> <p>complex（复数）：</p> <pre><code class="prism language-python">var <span class="token operator">=</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>   	     <span class="token comment"># 输出：&lt;class 'complex'&gt;</span> </code></pre> <p>（2）String（字符串）<br />   字符串或串是由数字、字母、下划线组成的一串字符，用‘’，“”，“‘ ’”都可表示。三者的使用可参考这篇文章： <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://jingyan.baidu.com/article/86fae3466a28bf7c48121a73.html"  rel="nofollow">python字符串的各种表达方式</a>.<br />   如下方代码所示，获得的类型为str类型。另外也顺便提一个小知识点，要访问字符串可以正向访问也可以反向访问，即正向时，var[0] = ‘p’,var[1] = ‘i’,var[2] = ‘g’；而反向时，var[-1] = ‘g’,var[-2] = ‘i’,var[-3] = ‘p’。</p> <pre><code class="prism language-python">var <span class="token operator">=</span> “pig” <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>   	     <span class="token comment"># 输出：&lt;class 'str'&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 正向访问，输出：'pig'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment"># 反向访问，输出：'g'</span> </code></pre> <p>（3）List（列表）<br />   列表是 Python 中使用最频繁的数据类型，用 [ ] 标识。列表可以完成大多数集合类的数据结构实现。它可以同时包含字符，数字，字符串甚至可以包含列表（即嵌套）。如下方代码所示，列表的处理方式和字符串类似。</p> <pre><code class="prism language-python">var <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'pig'</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2.2</span> <span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>   	     <span class="token comment"># 输出：&lt;class 'list'&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   	     <span class="token comment"># 获得第一个元素，输出：'pig'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token operator">+</span>var<span class="token punctuation">)</span>  		 <span class="token comment"># 打印组合的列表，输出：[ 'pig', 1 , 2.2，'pig', 1 , 2.2 ]</span> </code></pre> <p>（4）Tuple（元组）<br />   元组类似于 List（列表）。元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p> <pre><code class="prism language-python">var <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'pig'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2.2</span> <span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>   	     <span class="token comment"># 输出：&lt;class 'tuple'&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   	     <span class="token comment"># 获得第一个元素，输出：'pig'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token operator">+</span>var<span class="token punctuation">)</span>  		 <span class="token comment"># 打印组合的元组，输出：( 'pig', 1 , 2.2，'pig', 1 , 2.2 )</span> var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'dog'</span>			 <span class="token comment"># 出错！不能被二次赋值</span> </code></pre> <p>（5）Dictionary（字典）<br />   字典的相对于列表来说，列表是有序的对象集合，而字典是无序的对象集合。两者之间的区别在于字典当中的元素是通过键来存取的，而不是通过偏移存取。字典用"{ }"标识，字典由索引key和它对应的值value组成。</p> <pre><code class="prism language-python">dic <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token string">'name'</span>：<span class="token string">'张三'</span>，<span class="token string">'age'</span>：<span class="token number">18</span><span class="token punctuation">}</span> <span class="token keyword">print</span><span class="token punctuation">(</span>dic <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 得到键为'name' 的值，输出：'张三'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>dic <span class="token punctuation">[</span>age<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 得到键为'age' 的值，输出：18</span> <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>                <span class="token comment"># 得到完整的字典，输出：{'name'：'张三'，'age'：18}</span> <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 得到所有键，输出：dict_keys:(['name','age'])</span> <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 输出所有值,输出：dict_values:(['张三',18])</span> </code></pre> </h1> <h2> <a id="1_76" rel="nofollow"></a>1、变量与储存地址的关系</h2> <p>  在高级语言中，变量是对内存及其地址的抽象。以c语言举例， <strong>变量事先定义好一种数据类型，于是编译器为变量分配一个对应类型的地址空间和大小（如int 4字节，char 1字节），当该变量改变值时，改变的只是这块地址空间中保存的值，即在程序运行中，变量的地址就不能再发生改变了。这种存储方式称为值语义</strong>。如下代码用VS2015运行，由结果可知，test变量的值被存储在0x0020FDC8，当变量改变时，地址不变，地址中对应的值发生改变。</p> <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> using namespace std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> test <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>test <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> test <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	test <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>test <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> test <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p>运行结果：</p> <pre><code class="prism language-c"><span class="token number">0020F</span>DC8：<span class="token number">1</span> <span class="token number">0020F</span>DC8：<span class="token number">2</span> </code></pre> <p>  这里就存在一个问题，每次新建一个变量，编译器就会开辟一块对应数据类型大小的内存，然后给那块内存取个名字（变量名）。除非一块内存被释放，那么该变量才能释放，不然一个变量就只能固定地对应一个数据类型。<br />   对此，python做出了改变，它采用了与高级语言截然不同的方式。在python中，一切变量都是对象，变量的存储采用了引用语义的方式，存储的只是一个变量的值所在的内存地址，而不是这个变量的值本身。简单理解就是，<strong>python变量只是某个数据的引用（可以理解成C语言的指针），当python变量赋值时，解释器（因为python为解释性语言）先为数值开辟一块空间，而变量则指向这块空间，当变量改变值时，改变的并不是这块空间中保存的值，而是改变了变量的指向，使变量指向另一个地址空间。这种存储方式称为对象语义或指针语义</strong>。举个例子：</p> <pre><code class="prism language-c">str <span class="token operator">=</span> <span class="token string">'girls are pig'</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> str <span class="token operator">=</span> <span class="token string">'boys are dog'</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <p>运行结果：</p> <pre><code class="prism language-c"><span class="token number">113811696</span> <span class="token number">113812464</span> </code></pre> <p>  id()方法可以获得变量指向的地址，由运行结果所示，一开始变量指向了113811696这个地址，这个地址存放了‘girls are pig’这个字符串，当变量发生改变时，即该变量的指向改变了，指向地址113812464，该地址存放有‘boys are dog’这个字符串。这两个字符串都是一开始解释器先在内存开辟好的。<br />   所以，这也就解释了为什么python的变量被整形赋值就成了整形，被列表赋值就成了列表，变量可以为任意数据类型的，因为<strong>python的变量只是对编译器事先在内存存放好的数据的引用</strong>。<br />   python采用这种方式，好处就体现在，对于解释器来说，变量就只是一个地址的引用，而这个引用是可以随时改变的，那么就可以做到一个变量用来指向各种各样的数据类型，只要每次记录变量与哪个数据类型连接就行了，效率不就提升了嘛~。而对于c语言的编译器来说，一个变量就只能与一个数据类型长相厮守，所以它望着记录了各种各样变量名与内存值对应的表格，一边编译，一边陷入了沉思…（<strong>这里注意一点牛角尖，变量名只是给解释器看的东西，在内存是不做存储的，真正存储的是变量名对应的内容，上面说的变量都是int a中a这个个体</strong>）</p> <h2> <a id="2_111" rel="nofollow"></a>2、复杂数据类型的存储方式</h2> <p>  这里说的复杂数据类型主要是像列表，字典等这种可以改变内部数据的数据类型。以列表作为例子举例，代码如下所示：</p> <pre><code class="prism language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>			<span class="token comment">#输出：[1,2,3]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112607104（不同电脑分配给变量的地址不同）</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>			<span class="token comment">#输出：['hello',2,3]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112607104</span> list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>			<span class="token comment">#输出：['hello',2,3,4]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112607104</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>			<span class="token comment">#输出：['hello',4]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112925120</span> </code></pre> <p>  由运行结果所示，无论对列表list1进行什么增删改查操作，都不会影响list1本身的存储，只是改变了存储的内容，但list1重新赋值时，地址则发生改变。这个为了更好地解释清楚一点，就拿出我自豪的画画天赋吧（手动狗头，咳咳），上图~。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230206/9b3ddce2e974aa2bbf3c97bf55117b86.jpg" alt="Python自学笔记（三）深入理解Python变量的数据类型和存储"><br />   <strong>先声明一点，一个变量存有某一个对象的地址即等于该变量指向了这个对象</strong>。上面解释了，list1变量存放的是某个数据类型的引用，换种说法就是存放某个对象的地址，这里就是存放一个列表的地址，即list1变量指向了列表。如图所示，第一步，list1变量指向列表1，该列表存放着三个可变元素list1[0],list1[1],list1[2]，它们分别存放着不同对象（值）的地址。第二步，列表的第一个元素list1[0]发生改变，变成存放hello这个字符串对象的地址。第三步，列表新增了一个元素，该元素存放了新的整形对象4的地址。第四步，列表变量list1重新赋值，指向了新的列表2，列表2元素又指向了hello和4这两个对象。<br />   因此，<strong>前面三步，因为都是改变了列表元素的指向，变量本身的指向没有变化，即变量的地址也没有变化，但第四步，变量进行重新的赋值，即指向了新的列表，那么变量的地址变发生了变化。</strong><br />   这里也有重要的一点是，<strong>列表2和列表1指向的对象hello和4是一致的，因为它们的对象是一样的，所以它们共用一个对象</strong>。从下面代码可以体现，输出的结果是一致的。</p> <pre><code class="prism language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112926064</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：8791404644096</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112926064</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：8791404644096</span> </code></pre> <h2> <a id="3_140" rel="nofollow"></a>3、变量的赋值——浅拷贝和深拷贝</h2> <p><strong>（1）变量赋值的安全隐患</strong></p> <p>  因为python的这种<strong>变量是一个对象的引用</strong>的机制，必然导致的结果是两个变量赋值时会产生相互牵连的现象。举个例子，list1赋值为[1,2,3]，然后将其赋值给list2，改变list1时，我们可以发现list2也发生改变。代码如下。</p> <pre><code class="prism language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> list2 <span class="token operator">=</span> list1 <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>			<span class="token comment">#输出：[1,2,3]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>			<span class="token comment">#输出：[1,2,3]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112607104</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112607104</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>			<span class="token comment">#输出：['hello',2,3]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>			<span class="token comment">#输出：['hello',2,3]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112607104</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">#输出：112607104</span> </code></pre> <p>  解释图如下，第一步，list1变量指向了列表1，经过赋值后，变量list2也指向了列表1，因此两者地址相同。第二步，变量list1改变第一个列表元素的值，使其指向‘hello’，这时我们访问list2内容时，因为list1和list2指向的列表一致，所以list2就变成改变后的值。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230206/81142d56e8d2ae72782ffbf98a5f0fcf.jpg" alt="Python自学笔记（三）深入理解Python变量的数据类型和存储"><br />   由此引出主题深拷贝和浅拷贝，<strong>所谓深拷贝呢，就是一个变量的内容赋值给另一个变量时，是把全部资源重新复制一份再赋值给新的变量，而浅拷贝则不然，它的赋值只是将资源的地址给新的变量，二者同时共享该资源</strong>。显然，上面的赋值运算例子就是一个浅拷贝。</p> <p><strong>（2）浅拷贝</strong></p> <p>  为了更加深入了解二者，举一个稍微复杂一丢丢的例子，这里我们需要用到外部包，copy包，它的方法copy()就是一个浅拷贝，而deepcopy()就是一个深拷贝。先举例浅拷贝，这次采用嵌套列表并且使用copy方法来进行拷贝。对比输出结果可以看到对列表list1和list2进行操作时，两者没影响，但对peope这个列表操作时，则两个列表都有影响。</p> <pre><code class="prism language-python"><span class="token keyword">import</span> copy people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'girl'</span><span class="token punctuation">,</span><span class="token string">'boy'</span><span class="token punctuation">]</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>people<span class="token punctuation">]</span> list2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy']]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy']]</span> list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>		 list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>			 <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy'],'hello']</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy'],'hi']</span> people<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'pig'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['pig','boy'],'hello']</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['pig','boy'],'hi']</span> </code></pre> <p>  由下图可知，第一步，list1和list2分别指向列表1和列表2，其元素也指向对应的值，但个列表的第三个元素都指向了同个列表。第二步，list1产生新元素，指向‘hello’，list2产生新的元素，指向‘hi’。第三步，people这个列表的第一元素地址指向从‘girl’变成了‘pig’（狗头保命），因为是共用列表，所以list1和list2这两个变量都产生了变化。<strong>从中也可以分析得到，copy这个方法不像‘=’这种赋值运算，它拷贝了资源的第一层，但如果有该资源有第二层时，则变成共用资源，这也是比较容易被忽略的一点。</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230206/0b845ce08d4efbe5f113db103c8c4ac1.jpg" alt="Python自学笔记（三）深入理解Python变量的数据类型和存储"><br /><strong>（3）深拷贝</strong></p> <p>  为了解决浅拷贝带来的安全隐患，有时我们需要采用深拷贝来拷贝我们的资源。即python的copy模块提供的另一个deepcopy方法。<strong>深拷贝会完全复制原变量相关的所有数据，在内存中生成一堆一模一样的资源，在这个过程中我们对这两个变量中的一个进行任意修改都不会影响其他变量</strong>。我们来测试一下。</p> <pre><code class="prism language-python"><span class="token keyword">import</span> copy people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'girl'</span><span class="token punctuation">,</span><span class="token string">'boy'</span><span class="token punctuation">]</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>people<span class="token punctuation">]</span> list2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy']]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy']]</span> list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>		 list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>			 <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy'],'hello']</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy'],'hi']</span> people<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'pig'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['pig','boy'],'hello']</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>				<span class="token comment">#输出：[1,2,['girl','boy'],'hi']</span> </code></pre> <p>  流程如下图所示，其步骤和浅拷贝的步骤一致，但不同的一点是，步骤三的people列表改变时，只有list1变量的people列表中‘girl’变成‘pig’，而list2变量没什么影响，二者完全独立。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230206/a0d02de2828f0eb981b4caa137329248.jpg" alt="Python自学笔记（三）深入理解Python变量的数据类型和存储"></p> </h1> <p>  本来探索到上面已经差不多要结束，鬼知道我脑子又冒出了个奇怪的想法，python的int类型到底要占有电脑的多少个字节呢。毕竟习惯了c语言，而python对变量神奇的设计总是散发着它独特的魅力。所以找啊找，找到一个可以显示数据大小的API函数getsizeof()，只要导入sys包即可。那么写个例子：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> sys <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 输出：24</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 输出：28 </span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 输出：28</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出：28</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出：32</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 输出：44</span> </code></pre> <p>  看到输出结果，属实让人震惊，一个int型的数值，居然用高达24个字节来存储，而且在电脑存储大小居然是不限定的，是自增长的。喝口水压压惊后，让我想到c++的STL容器，可以使用栈顶指针，当检测到容量超出时，则删除旧内存而去开辟一块新的内存，确实可以实现这种效果。<br />   扯完犊子，那么这里首先先解决第一个问题，int类型这个变量什么时候内存会变大？我在这篇博客中提到的文章找到了答案: <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/3teeth/p/11633843.html"  rel="nofollow">点此处跳转</a>。重点就是下面这张图，简单来说就是int类型每多2^30（1073741824 ）就会增加四个字节。这也验证了上面例子getsizeof(2**30)是32字节，而比它小的是28个字节的原因，当然零除外。其他类型也可以在下面找到答案。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230206/be476f3891991de87c33f2e91211a595.jpg" alt="Python自学笔记（三）深入理解Python变量的数据类型和存储"><br />   那么它的自增长问题呢，这个可能要去看python的源码才能解决，还好有大佬已经提前给我们铺了下路，这里我就没这个能力去了解太深入了，直接引用大佬的结论就可以了。具体可以参考这篇文章：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://zxi.mytechroad.com/blog/desgin/python%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E5%8D%A0%E5%A4%9A%E5%B0%91%E4%B8%AA%E5%AD%97%E8%8A%82%EF%BC%9F/"  rel="nofollow">点此处跳转</a>。在64位python的解释器中，int类型的定义是通过一个结构体来定义的，简化后的结构体如下所示：</p> <pre><code class="prism language-c"><span class="token keyword">struct</span> PyLongObject <span class="token punctuation">{<!-- --></span>   <span class="token keyword">long</span> ob_refcnt<span class="token punctuation">;</span>                <span class="token comment">// 8 bytes</span>   <span class="token keyword">struct</span> _typeobject <span class="token operator">*</span>ob_type<span class="token punctuation">;</span>   <span class="token comment">// 8 bytes</span>   <span class="token keyword">long</span> ob_size<span class="token punctuation">;</span>                  <span class="token comment">// 8 bytes</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ob_digit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 4 bytes * abs(ob_size)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre> <p>  ob_refcnt引用计数8个字节，ob_type类型信息8个字节（指针），ob_size变长部分元素的个数8个字节。ob_digit变长的数据部分，字节数为4 * abs（ob_size），ob_size可以为0，所以ob_digit这部分可以占0字节，那么最少int就为8 + 8 + 8 = 24个字节，每次增量都是4（unsigned int）的倍数。<br />   对于32位的版本与64位又有所不同，定义如下，最少12个字节，增量为2个字节。</p> <pre><code class="prism language-c"><span class="token keyword">struct</span> PyLongObject <span class="token punctuation">{<!-- --></span>   <span class="token keyword">int</span> ob_refcnt<span class="token punctuation">;</span>                <span class="token comment">// 4 bytes</span>   <span class="token keyword">struct</span> _typeobject <span class="token operator">*</span>ob_type<span class="token punctuation">;</span>  <span class="token comment">// 4 bytes</span>   <span class="token keyword">int</span> ob_size<span class="token punctuation">;</span>                  <span class="token comment">// 4 bytes</span>   <span class="token keyword">unsigned</span> <span class="token keyword">short</span> ob_digit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 2 bytes * abs(ob_size)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre> <p>  至于其他类型实际大小，也是一个类似的方案，这里也不探讨太多东西了，学无止境吧~</p> </h1> <p>  这篇文章从变量的角度切入，首先谈谈什么是变量的类型，并且举例了python中常用的基本数据类型，接着讨论了变量在内存中的存储，说白了就一句话，变量就是某一个对象的引用，对象在内存爱怎么放怎么放与变量无关。最后讨论了int类型占有电脑的字节数。</p> <hr color="#000000" size="1&quot;"/> <font color="#999AAA"> Tips：本人能力有限，如有错误之处麻烦指出。放弃不难，但坚持一定很酷！ </font>                 </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-22105.htm">Python 3.10 的一些新特性</a></p>
                                        <p>下一个：<a href="/news/article-22561.htm">React功能篇 &#8211; 使用react-i18next进行国际化</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-9-19-free-v2ray.htm" title="「9月19日」最高速度22.6M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费机场订阅链接">「9月19日」最高速度22.6M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-24870.htm" title="动物疫苗预防控制中心官网电话（动物疫苗厂家电话）">动物疫苗预防控制中心官网电话（动物疫苗厂家电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-6-23-free-node-subscribe-links.htm" title="「6月23日」最高速度18.9M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费节点订阅链接">「6月23日」最高速度18.9M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-19037.htm" title="驱虫药猫多少钱（驱虫药猫多少钱一瓶）">驱虫药猫多少钱（驱虫药猫多少钱一瓶）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-25-node-share.htm" title="「10月25日」最高速度20M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费机场订阅链接">「10月25日」最高速度20M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-28121.htm" title="按照 Promise/A+ 规范逐行注释并实现 Promise_在线工具">按照 Promise/A+ 规范逐行注释并实现 Promise_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-15-clash-windows.htm" title="「8月15日」最高速度19.8M/S，2024年SSR/Shadowrocket/V2ray/Clash每天更新免费机场订阅链接">「8月15日」最高速度19.8M/S，2024年SSR/Shadowrocket/V2ray/Clash每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-6-node-share.htm" title="「10月6日」最高速度19.4M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅链接">「10月6日」最高速度19.4M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-27661.htm" title="长沙猫咪领养中心 长沙猫咪领养中心官网">长沙猫咪领养中心 长沙猫咪领养中心官网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-10-clash-windows.htm" title="「8月10日」最高速度22.4M/S，2024年SSR/Shadowrocket/V2ray/Clash每天更新免费机场订阅链接">「8月10日」最高速度22.4M/S，2024年SSR/Shadowrocket/V2ray/Clash每天更新免费机场订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">16</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p class="copyrights-text mb-3 mb-lg-0">
                          TodayClashNode今日订阅站 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/website/js/frontend/todayclashnode/jquery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/website/js/frontend/todayclashnode/lightbox2/js/lightbox.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/front.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>
<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">


<head>
        <link rel="canonical" href="https://todayclashnode.github.io/news/article-84807.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Docker 部署不香吗？</title>
        <meta name="description" content="目录    docker介绍   安装docker     Ubuntu安装docker   CentOS安装docker   通过脚本安装     拉取java环境   创建springboot项目" />
        <link rel="icon" href="/assets/website/img/todayclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="TodayClashNode今日订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://todayclashnode.github.io/news/article-84807.htm" />
    <meta property="og:site_name" content="TodayClashNode今日订阅站" />
    <meta property="og:title" content="Docker 部署不香吗？" />
    <meta property="og:image" content="https://todayclashnode.github.io/uploads/20240614/268c6fb6b397dee3eb599d4f754b5a8f.webp" />
        <meta property="og:release_date" content="2025-03-30T09:35:44" />
    <meta property="og:updated_time" content="2025-03-30T09:35:44" />
        <meta property="og:description" content="目录    docker介绍   安装docker     Ubuntu安装docker   CentOS安装docker   通过脚本安装     拉取java环境   创建springboot项目" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Docker 部署不香吗？">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PB8VLG2G25"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-PB8VLG2G25');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                <a href="/" class="navbar-brand">
                                <span>
                    Today ClashNode                </span>
                                </a>

                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/client.htm" class="nav-link">客户端</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/news/" class="nav-link">新闻资讯</a></li>
                                            </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>Docker 部署不香吗？</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/" class="animsition-link">新闻资讯</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <div id="js_content"> <p style="text-align: center"> <p>目录</p> <article rel="nofollow"> <ul> <li> <p>docker介绍</p> </li> <li> <p>安装docker</p> </li> <li> <ul> <li> <p>Ubuntu安装docker</p> </li> <li> <p>CentOS安装docker</p> </li> <li> <p>通过脚本安装</p> </li> </ul> </li> <li> <p>拉取java环境</p> </li> <li> <p>创建springboot项目</p> </li> <li> <p>打包springboot到docker</p> </li> <li> <p>docker查看容器的日志</p> </li> <li> <p>查看log4j2输出问文件日志</p> </li> </ul> <p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p> <p>docker的核心思想是通过对应用的封装、分发、部署、运行生命周期进行管理，达到应用组件级别的“一次性封装，到处运行”。这里的应用组件，可以是一个web应用，也可以是一个环境，更可以是一个数据库等等。</p> <p>既然docker这么神奇，那我们如何安装docker呢？我们一起来走一下吧。</p> <h2><strong>Ubuntu安装docker</strong></h2> <p>由于本人的系统是CentOS，所以这里就只展示一下CentOS的安装方式，Ubuntu以及其他系统请自行百度。</p> <h2><strong>CentOS安装docker</strong></h2> <p>docker要求CentOS在7.0以后的版本，如果你的系统版本还在7.0以前，请先升级一下版本在进行安装，同时不支持32位的系统，内核版本至少3.10。</p> <p>请先确保没有安装过docker，否则有可能会导致安装失败，如果之前安装过，可以尝试直接yum isntall -y docker</p> <p><strong>1.更新软件源</strong>第一个命令</p> <pre class="has"><code class="language-go">yum update</code></pre> <p><img fetchpriority="high" decoding="async" height="94" src="http://img.555519.xyz/uploads/20230224/8f011f178d5054da4128f1e0744256b2.jpg" alt="Docker 部署不香吗？" width="579"/></p> <p>遇到他输入y，然后回车，看到下面信息表示更新成功：</p> <p><img decoding="async" height="358" src="http://img.555519.xyz/uploads/20230224/7d6c1652c114aa64bae1571efb95c287.jpg" alt="Docker 部署不香吗？" width="1010"/></p> <p>第二个命令</p> <pre class="has"><code class="language-go">yum install&nbsp;-y yum-utils device-mapper-persistent-data&nbsp;lvm2</code></pre> <p><img decoding="async" height="348" src="http://img.555519.xyz/uploads/20230224/abd0dfb4c93fd59bfed1fcd1a904ce16.jpg" alt="Docker 部署不香吗？" width="1050"/></p> <p><strong>2.添加docker稳定版本的yum软件源</strong></p> <pre class="has"><code class="language-go">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo </code></pre> <p><img loading="lazy" decoding="async" height="103" src="http://img.555519.xyz/uploads/20230224/a1945f37c0af023baccff2adc145555b.jpg" alt="Docker 部署不香吗？" width="834"/></p> <p><strong>3.再次更新yum源，并安装docker</strong></p> <pre class="has"><code class="language-go">yum update </code></pre> <p><img loading="lazy" decoding="async" height="175" src="http://img.555519.xyz/uploads/20230224/860ddf68287ae484fa9156451e5a9096.jpg" alt="Docker 部署不香吗？" width="950"/></p> <pre class="has"><code class="language-go">yum install&nbsp;-y docker-ce </code></pre> <p><img loading="lazy" decoding="async" height="185" src="http://img.555519.xyz/uploads/20230224/043a5851b5fc100413ff2918a04c6508.jpg" alt="Docker 部署不香吗？" width="950"/></p> <p>看到这个页面，标识docker已经安装成功了。</p> <p><strong>4.安装完成之后启动docker</strong></p> <pre class="has"><code class="language-go">systemctl start&nbsp;docker</code></pre> <p><strong>5.重启</strong></p> <pre class="has"><code class="language-go">systemctl&nbsp;restart docker</code></pre> <p><strong>6.停止</strong></p> <pre class="has"><code class="language-go">systemctl stop&nbsp;docker</code></pre> <p><strong>7.开机自启动</strong></p> <pre class="has"><code class="language-go">systemctl enable&nbsp;docker</code></pre> <p><strong>8.查看docker的状态</strong></p> <pre class="has"><code class="language-go">systemctl&nbsp;status docker</code></pre> <h2>通过脚本安装</h2> <p>除了上面的yum安装，还可以采用shell脚本安装，安装流程如下：</p> <pre class="has"><code class="language-go">curl -fsSL https://get.docker.com/ | sh</code></pre> <p>或者</p> <pre class="has"><code class="language-go">wget -qO- https://get.docker.com/ | sh</code></pre> <p>拉取jdk很简单，直接执行一行代码即可，我这里拉取的时java 8的版本。</p> <pre class="has"><code class="language-go">docker pull java:8</code></pre> <p>拉取完成之后执行：</p> <pre class="has"><code class="language-go">docker&nbsp;images</code></pre> <p>如果出现下面内容，表示拉取成功</p> <p><img loading="lazy" decoding="async" height="91" src="http://img.555519.xyz/uploads/20230224/f36b992b6444568bbfd539389bd418e9.jpg" alt="Docker 部署不香吗？" width="769"/></p> <p><strong>1.新建项目</strong></p> <p><img loading="lazy" decoding="async" height="557" src="http://img.555519.xyz/uploads/20230224/94aa4a60352ac04671412290d644d0ad.jpg" alt="Docker 部署不香吗？" width="819"/></p> <p>引入sprint-boot-web的依赖</p> <p><img loading="lazy" decoding="async" height="555" src="http://img.555519.xyz/uploads/20230224/3171b6e20480c21a01ae9507a8fc79c2.jpg" alt="Docker 部署不香吗？" width="819"/></p> <p>新建完成之后的项目结构</p> <p><img loading="lazy" decoding="async" height="156" src="http://img.555519.xyz/uploads/20230224/5b9bb6ae0fe082a334630ca710e34ff7.jpg" alt="Docker 部署不香吗？" width="281"/></p> <p><strong>2.引入docker依赖</strong></p> <pre class="has"><code class="language-go">&lt;properties&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;docker.image.prefix&gt;registry.aliyuncs.com/linhuatest&lt;/docker.image.prefix&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/properties&gt;   &nbsp;&lt;!-- docker插件 --&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.spotify&lt;/groupId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.0.0&lt;/version&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--docker文件所在的目录--&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;resources&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;resource&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;targetPath&gt;/&lt;/targetPath&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;directory&gt;${project.build.directory}&lt;/directory&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&gt;${project.build.finalName}.jar&lt;/include&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/resource&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/resources&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugin&gt;</code></pre> <p><strong>3.新建docker文件</strong>在main目录下新建docker目录，然后在docker目录下创建dockerfile文件，不需要后缀名。</p> <p><img loading="lazy" decoding="async" height="393" src="http://img.555519.xyz/uploads/20230224/e878412fd3a682a6ebb339118a22b34b.jpg" alt="Docker 部署不香吗？" width="521"/></p> <p>创建完成之后的工程目录如下：</p> <p><img loading="lazy" decoding="async" height="302" src="http://img.555519.xyz/uploads/20230224/763fd34495a150d25a77331ff2790942.jpg" alt="Docker 部署不香吗？" width="466"/></p> <p><strong>4.编辑dockerfile文件</strong></p> <pre class="has"><code class="language-go">FROM java:8 VOLUME /tmp/tomcat ADD spring-boot-docker-0.0.1-SNAPSHOT.jar springboot-docker.jar ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/springboot-docker.jar"]</code></pre> <blockquote> <p>FROM：指定存在的镜像，java:8是我刚刚拉取的镜像，运行的基础。VOLUME：指向的一个临时文件，用于存储tomcat工作。ADD：复制文件并且重命名文件。ENTRYPOINT：初始化配置或者自定义配置。</p> </blockquote> <p><strong>5.创建测试接口</strong></p> <p><img loading="lazy" decoding="async" height="87" src="http://img.555519.xyz/uploads/20230224/65f4546b6feb9d7b3ae5d14becd5a590.jpg" alt="Docker 部署不香吗？" width="341"/></p> <p>TestController内容如下：</p> <pre class="has"><code class="language-go">package&nbsp;com.ymy.controller;  import&nbsp;lombok.extern.slf4j.Slf4j; import&nbsp;org.springframework.web.bind.annotation.RequestMapping; import&nbsp;org.springframework.web.bind.annotation.RequestMethod; import&nbsp;org.springframework.web.bind.annotation.RestController;  @RestController @Slf4j public class TestController {  &nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;= "/test",method = RequestMethod.GET) &nbsp;&nbsp;&nbsp;&nbsp;public String test(){ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("这是控制台日志！"); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.info("这是输出到文件的日志"); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;"HELLO-BUG！！！！！！！！！！"; &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>在resources目录下创建log4j2.xml文件主要看这两个参数：</p> <p><img loading="lazy" decoding="async" height="89" src="http://img.555519.xyz/uploads/20230224/e50b7a4ad281f0e38509aa88e3534eb7.jpg" alt="Docker 部署不香吗？" width="641"/></p> <p>这里我使用了log4j2的日志，如何配置log4j2的日志，请参考 springboot整合Log4j2（将日志输出到指定文件）。</p> <p>6.编写application.yml配置文件</p> <pre class="has"><code class="language-go">server: &nbsp;&nbsp;port: 9999</code></pre> <p>到这里springboot项目就创建完成了，我们现在启动一下项目。</p> <pre class="has"><code class="language-go">. ____ _ __ _ _ &nbsp;/\\ / ___'_ __ _ _(_)_ __ __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ &nbsp;\\/ ___)| |_)| | | | | || (_| | ) ) ) ) &nbsp;&nbsp;' |____| .__|_| |_|_| |_\__, | / / / / &nbsp;=========|_|==============|___/=/_/_/_/ &nbsp;:: Spring Boot :: (v2.2.5.RELEASE)  15:29:19.386 [main] INFO com.ymy.SpringBootDockerApplication - Starting SpringBootDockerApplication on LAPTOP-3GLHJRE9 with PID 20652 (D:\springboot\spring-boot-docker\target\classes started by admin in D:\springboot) 15:29:19.395 [main] INFO com.ymy.SpringBootDockerApplication - No active profile set, falling back to&nbsp;default&nbsp;profiles: default 15:29:20.183&nbsp;[main] INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized&nbsp;with&nbsp;port(s): 9999&nbsp;(http) 15:29:20.200&nbsp;[main] INFO org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"] 15:29:20.201&nbsp;[main] INFO org.apache.catalina.core.StandardService - Starting&nbsp;service [Tomcat] 15:29:20.201&nbsp;[main] INFO org.apache.catalina.core.StandardEngine - Starting&nbsp;Servlet engine: [Apache Tomcat/9.0.31] 15:29:20.309&nbsp;[main] INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext 15:29:20.309&nbsp;[main] INFO org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in&nbsp;881&nbsp;ms 15:29:20.452&nbsp;[main] INFO org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor' 15:29:20.568&nbsp;[main] INFO org.apache.coyote.http11.Http11NioProtocol - Starting&nbsp;ProtocolHandler ["http-nio-9999"] 15:29:20.596&nbsp;[main] INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on&nbsp;port(s): 9999&nbsp;(http) with&nbsp;context&nbsp;path&nbsp;'' 15:29:20.599&nbsp;[main] INFO com.ymy.SpringBootDockerApplication - Started SpringBootDockerApplication in&nbsp;1.664&nbsp;seconds (JVM running for&nbsp;4.04)</code></pre> <p>如果看到这个页面表示springboot项目没有问题，现在我们将项目拷贝到服务器中。</p> <p><img loading="lazy" decoding="async" height="21" src="http://img.555519.xyz/uploads/20230224/b1259d7ad462efd6acc9164be75fd9b5.jpg" alt="Docker 部署不香吗？" width="547"/></p> <p>我现在已经将项目拷贝到服务器中，我们现在需要将它打包到docker中，借助maven实现打包，如果还没有安装maven的，请先安装maven，切换到项目的根目录</p> <p><img loading="lazy" decoding="async" height="157" src="http://img.555519.xyz/uploads/20230224/66bc65bc2a6100c36231c7c0a667ec9a.jpg" alt="Docker 部署不香吗？" width="530"/></p> <p>执行</p> <pre class="has"><code class="language-go">mvn clean package&nbsp;docker:build</code></pre> <p>执行完之后将会看到</p> <p><img loading="lazy" decoding="async" height="324" src="http://img.555519.xyz/uploads/20230224/993d593e31b536c6a848797c83370fab.jpg" alt="Docker 部署不香吗？" width="638"/></p> <p>表示打包成功。</p> <p>执行</p> <pre class="has"><code class="language-go">docker&nbsp;images</code></pre> <p><img loading="lazy" decoding="async" height="106" src="http://img.555519.xyz/uploads/20230224/bf77d92c41726282800a409d1c613006.jpg" alt="Docker 部署不香吗？" width="792"/></p> <p>我们发现docker的镜像中多了一个springboot/spring-boot-docker，没错，这个就是我们的springboot项目，既然镜像已经生成，那么如何使用这个镜像呢？</p> <p>执行</p> <pre class="has"><code class="language-go">docker run --name springbooot-docker -p 9999:9999 -d 4a2</code></pre> <p><img loading="lazy" decoding="async" height="64" src="http://img.555519.xyz/uploads/20230224/8fbd43f683c03413a4f5a7223157e049.jpg" alt="Docker 部署不香吗？" width="779"/></p> <blockquote> <p>run:运行的意思–name：指定镜像启动的之后的名称-p：容器和外部的端口映射 第一个端口：外部 第二个端口：内部-d：后台运行 -t:实时运行，窗口关闭，程序结束。4a2：表示镜像的id（IMAGE ID）前3位，这里的id并不需要输入全称，只需要输入前几个就行，有一个前提：当有很多镜像的时候，前面几个字符就有可能会相同，这个时候就需要多输入几位，直到不相同位置。</p> </blockquote> <p>启动了镜像之后我怎么知道有没有成功呢？这个时候我们就需要一个命令来查看已经启动的任务</p> <pre class="has"><code class="language-go">docker ps</code></pre> <p><img loading="lazy" decoding="async" height="124" src="http://img.555519.xyz/uploads/20230224/f48c014225efc9a2324fd2e178c8ba07.jpg" alt="Docker 部署不香吗？" width="996"/></p> <p>我们发现这里已经出现了我们之前启动的镜像，所以这基本上代表启动成功了，为了验证是否启动成功，我们在浏览器输入测试的接口：ip:9999/test</p> <p><img loading="lazy" decoding="async" height="121" src="http://img.555519.xyz/uploads/20230224/6cc1582928c8d5390eba9519c3465a2f.jpg" alt="Docker 部署不香吗？" width="570"/></p> <p>这说明我们已经springboot项目已经启动成功了，到这里docker部署springboot项目差不就结束了，但是你可能还有一个疑问，如果我想看控制台的日志怎么办呢？像我们一般使用java -jar的时候都会生成一个控制台的日志文件，那docker容器中怎么查看控制台日志呢？其实很简单，只需要一行命令即可</p> <pre class="has"><code class="language-go">docker ps</code></pre> <p>找到容器的id</p> <p><img loading="lazy" decoding="async" height="103" src="http://img.555519.xyz/uploads/20230224/af8cbca7549638fc5dd37d8d35ab8d57.jpg" alt="Docker 部署不香吗？" width="1109"/></p> <p>然后执行</p> <pre class="has"><code class="language-go">docker logs -f  </code></pre> <p><img loading="lazy" decoding="async" height="482" src="http://img.555519.xyz/uploads/20230224/3054d6b5e9744dc244fa75c9d7e91fb5.jpg" alt="Docker 部署不香吗？" width="1112"/></p> <p>这个时候我们就能看到控制台的日志了，如何我们想看log4j2输出的文件日志呢？</p> <p>还记得我们在log4j2中配置了日志的输出目录了吗？</p> <p><img loading="lazy" decoding="async" height="81" src="http://img.555519.xyz/uploads/20230224/bf5bccc84db2f45a76eede4cec8af0aa.jpg" alt="Docker 部署不香吗？" width="699"/></p> <p>没错，就是这个， 我们切换到这个目下</p> <p><img loading="lazy" decoding="async" height="134" src="http://img.555519.xyz/uploads/20230224/4a9bf646d780a91d438f4db01f9103b5.jpg" alt="Docker 部署不香吗？" width="533"/></p> <p>发现这里生成了三个文件，我们打开info.log</p> <pre class="has"><code class="language-go">tail&nbsp;-100f info.log</code></pre> <p><img loading="lazy" decoding="async" height="203" src="http://img.555519.xyz/uploads/20230224/95945d7faf04ccbdd9245513f6beabdf.jpg" alt="Docker 部署不香吗？" width="1117"/></p> <p>我们发现并没有输入我们打印的：“这是输出到文件的日志”，难道是我们配置错了问题？不是的，是因为我们找错了位置，真正的文件日志在容器内部，所以我们需要先进入容器内部</p> <pre class="has"><code class="language-go">docker exec&nbsp;-it ca2cd59fff9b /bin/bash</code></pre> <blockquote> <p>ca2cd59fff9b：容器id</p> </blockquote> <p>然后再切换到我们日志的输出路径</p> <pre class="has"><code class="language-go">cd&nbsp;work/spring-boot-docker</code></pre> <p><img loading="lazy" decoding="async" height="58" src="http://img.555519.xyz/uploads/20230224/8d20cdfb76a2c1d6ed13c11c1e99f4fc.jpg" alt="Docker 部署不香吗？" width="443"/></p> <p>这里也找到了三个日志文件，我们打印info.log</p> <pre class="has"><code class="language-go">tail&nbsp;-100f info.log</code></pre> <p><img loading="lazy" decoding="async" height="365" src="http://img.555519.xyz/uploads/20230224/3660bf0efd8afb0cfedd66f1ff2e5ec7.jpg" alt="Docker 部署不香吗？" width="1117"/></p> <p>这就是我们log4j2输出到文件的日志，到这里docker整合springboot项目就差不多结束了，如果想要退出docker容器可以使用</p> </article> </div></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-84073.htm">开宠物食品厂有利润吗知乎 开宠物食品厂有利润吗知乎文章</a></p>
                                        <p>下一个：<a href="/news/article-84809.htm">动物医院介绍文案 动物医院介绍文案怎么写</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-71091.htm" title="上海宠物医院有多少家分院（上海宠物医院知乎）">上海宠物医院有多少家分院（上海宠物医院知乎）</a></li>
                        <li class="py-2"><a href="/news/article-81279.htm" title="开动物医院需要具备哪些条件和要求证件（开动物医院什么资质）">开动物医院需要具备哪些条件和要求证件（开动物医院什么资质）</a></li>
                        <li class="py-2"><a href="/news/article-65922.htm" title="宠物鸟交易吧（宠物鸟交易平台）">宠物鸟交易吧（宠物鸟交易平台）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-26-clash-node-daily-updates.htm" title="「3月26日」最高速度20.9M/S，2025年Shadowrocket/Clash/SSR/V2ray每天更新免费机场订阅链接">「3月26日」最高速度20.9M/S，2025年Shadowrocket/Clash/SSR/V2ray每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-20-clash-node-daily-updates.htm" title="「3月20日」最高速度19.1M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费机场订阅链接">「3月20日」最高速度19.1M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-10-free-node-subscribe.htm" title="「3月10日」最高速度21.4M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅链接">「3月10日」最高速度21.4M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-77128.htm" title="通过winsw将SpringBoot可运行jar包做成后台服务，启动运行">通过winsw将SpringBoot可运行jar包做成后台服务，启动运行</a></li>
                        <li class="py-2"><a href="/news/article-84073.htm" title="开宠物食品厂有利润吗知乎 开宠物食品厂有利润吗知乎文章">开宠物食品厂有利润吗知乎 开宠物食品厂有利润吗知乎文章</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-23-node-share-links.htm" title="「3月23日」最高速度20.1M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅链接">「3月23日」最高速度20.1M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-17-free-ssr-node.htm" title="「3月17日」最高速度18.9M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅链接">「3月17日」最高速度18.9M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p class="copyrights-text mb-3 mb-lg-0">
                          TodayClashNode今日订阅站 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/website/js/frontend/todayclashnode/jquery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/website/js/frontend/todayclashnode/lightbox2/js/lightbox.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/front.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>
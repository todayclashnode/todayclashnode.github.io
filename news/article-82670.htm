<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">


<head>
        <link rel="canonical" href="https://todayclashnode.github.io/news/article-82670.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>用RxJS和react开发mac地址输入框</title>
        <meta name="description" content="项目简介  RxJS简介  项目结构  项目详解  170624更新 目录  			   项目简介 本次使用了RxJS和react开发了一个mac地址输入框，主要实现的功能有限制输入符合条件的字符1-" />
        <link rel="icon" href="/assets/website/img/todayclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="TodayClashNode今日订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://todayclashnode.github.io/news/article-82670.htm" />
    <meta property="og:site_name" content="TodayClashNode今日订阅站" />
    <meta property="og:title" content="用RxJS和react开发mac地址输入框" />
    <meta property="og:image" content="https://todayclashnode.github.io/uploads/20240614/055c81aece16c385c00a2f7a1100eb37.webp" />
        <meta property="og:release_date" content="2025-03-27T08:15:43" />
    <meta property="og:updated_time" content="2025-03-27T08:15:43" />
        <meta property="og:description" content="项目简介  RxJS简介  项目结构  项目详解  170624更新 目录  			   项目简介 本次使用了RxJS和react开发了一个mac地址输入框，主要实现的功能有限制输入符合条件的字符1-" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="用RxJS和react开发mac地址输入框">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/website/js/frontend/todayclashnode/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/website/css/todayclashnode/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PB8VLG2G25"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-PB8VLG2G25');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                <a href="/" class="navbar-brand">
                                <span>
                    Today ClashNode                </span>
                                </a>

                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/client.htm" class="nav-link">客户端</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/news/" class="nav-link">新闻资讯</a></li>
                                            </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>用RxJS和react开发mac地址输入框</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/" class="animsition-link">新闻资讯</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="项目简介">项目简介</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="RxJS简介">RxJS简介</a></li> <li><i class="be be-arrowright"></i> <a href="#title-2" title="项目结构">项目结构</a></li> <li><i class="be be-arrowright"></i> <a href="#title-3" title="项目详解">项目详解</a></li> <li><i class="be be-arrowright"></i> <a href="#title-4" title="170624更新">170624更新</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="content_views" class="htmledit_views"> <div class="article fmt article__content"> <span class="directory"></span><h4 id="title-0">项目简介</h4> <p>本次使用了RxJS和react开发了一个mac地址输入框，主要实现的功能有限制输入符合条件的字符1-9,a-f,并每隔两位可以自动添加用于分割的冒号。项目屏蔽了react的事件处理，同时使用setSelectionRange来手动控制光标。可以查看项目的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://hpoenixf.com/demo/macInput.html"  rel="nofollow">demo</a>,<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/hpoenixf/rx-macInput"  rel="nofollow">项目地址</a></p> <span class="directory"></span><h4 id="title-1">RxJS简介</h4> <p>RxJS 是 Reactive Extensions 在 JavaScript 上的实现，具体来说是一系列工具库，包括事件处理，函数节流，延时等函数，RxJS应用了’流‘的思想，同时具有事件和时间的概念。RxJS也可以用于处理异步流程，比起Promise具有可取消和可延迟，重试等优点。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://yuyang041060120.github.io/2016/05/16/observable-vs-promise/"  rel="nofollow">Promise vs Observable</a><br />RxJS中有两个比较重要的概念，分别是Observable和observer。Observable可以使用create,of,from,fromEvent等方法来产生流，而Observer可以对流进行观察。最后两者通过subscribe来结合,例子如下：</p> <pre><code class="javascript"> var Observable = Rx.Observable.create(observer =&gt; {     observer.next(2);     observer.complete();     return  () =&gt; console.log('disposed'); });  var Observer = Rx.Observer.create(     x =&gt; console.log('Next:', x),     err =&gt; console.log('Error:', err),     () =&gt; console.log('Completed') );  var subscription = Observable.subscribe(Observer); </code></pre> <p>来自<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.alloyteam.com/2016/12/learn-rxjs/"  rel="nofollow">构建流式应用—RxJS详解</a></p> <p>更多关于RxJS,可以阅读<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://xgrommx.github.io/rx-book/index.html"  rel="nofollow">Introduction | RxJS - Javascript library for functional reactive programming.</a></p> <span class="directory"></span><h4 id="title-2">项目结构</h4> <pre><code class="javascript">     // 监听事件，发起流和处理流     componentDidMount () {     this.t = ReactDOM.findDOMNode(this.refs.t)     let keydownValue = Rx.Observable.fromEvent(this.t,'keydown').map(e =&gt; e.key.toUpperCase())     this.sa = keydownValue.filter(value =&gt; value.length === 1 &amp;&amp; value.match(/[0-9A-F]/)).subscribe(value =&gt; {this.setColon('before');this.insertValue(value); this.setColon();this.setDomValue()})     // 省略类似的部分     }     // 取消订阅     componentWillUnmount()      this.sa.dispose()     // 类似的部分省略     }          // 一些用到的方法,这里省略               // 取消原生的事件监听     render() {       return (         &lt;div className="App"&gt;           &lt;input type="text" onKeyDown={e =&gt; e.preventDefault()}  ref="t"/&gt;         &lt;/div&gt;       );     }       </code></pre> <span class="directory"></span><h4 id="title-3">项目详解</h4> <p>首先使用Rx.Observable.fromEvent来监听输入框的按键事件，并获取按键的key值，保存为keydownValue</p> <pre><code class="javascript"> let keydownValue = Rx.Observable.fromEvent(this.t,'keydown')  .map(e =&gt; e.key.toUpperCase())</code></pre> <p>接着首先考虑输入字符的情况,在这里，显示筛选出按键符合要求的情况，接着在subscribe中对数据进行处理。在插入新的字符之前和之后，都需要判断是否在前面加上冒号，最后使用setDomValue来让保存在state中的value显示到输入框上。</p> <pre><code class="javascript">    this.sa = keydownValue         .filter(value =&gt; value.length === 1 &amp;&amp; value.match(/[0-9A-F]/))         .subscribe(value =&gt; {           this.setColon('before');           this.insertValue(value);            this.setColon();           this.setDomValue()         })</code></pre> <p>判断是否需要插入冒号的函数setColon,需要排除前面没有字符和周围已经有冒号的情况。</p> <pre><code class="javascript">  setColon = type =&gt; this.state.value.length &amp;&amp;        (type !== 'before' ? !this.isNearColon() : !this.isLastColon()) &amp;&amp;        !(this.state.value.slice(0, this.state.pos).replace(/:/g, '').length%2) &amp;&amp;        this.insertValue(':') </code></pre> <p>插入新字符的函数。在记录的光标位置pos值上插入新的字符，然后改变光标位置。如果在字符末尾有未完成的字符对(即1f:的形式)又在中间插入新的字符串且字符对已经到达六个，则删掉最后一个字符对。</p> <pre><code class="javascript">  insertValue = value =&gt; {     if (this.state.value.length !== 17) {       this.setState({       ...this.state,       value: this.state.value.slice(0, this.state.pos) +          value + this.state.value.slice(this.state.pos, this.state.value.length)       })       this.setPos(this.state.pos + 1)       if (this.state.value.split(':').length === 7) {         this.setState({         ...this.state,          value: this.state.value.slice(0, this.state.value.lastIndexOf(':'))         })       }   }}</code></pre> <p>接着是讲解关于删除的流，筛选按键值为'BACKSPACE'的流，执行deleteValue方法和setDomValue</p> <pre><code class="javascript">    this.sb = keydownValue.filter(value =&gt; value === 'BACKSPACE')     .subscribe(() =&gt; {       this.deleteValue()       this.setDomValue()     })</code></pre> <p>deleteValue,在value和位置都大于零时才执行，如果删除后字符后，新的最后一个字符是冒号，则自动删掉该冒号。</p> <pre><code class="javascript">  deleteValue = () =&gt; {     if (this.state.value.length &amp;&amp; this.state.pos) {       this.setState({       ...this.state,        value: this.state.value.slice(0, this.state.pos - 1) +        this.state.value.slice(this.state.pos, this.state.value.length)       })       this.setPos(this.state.pos - 1)       if (this.isLastColon()) {         this.deleteValue()       }     }   }</code></pre> <p>接着是订阅了左右方向键移动的流，比较简单，就不详细解释了。</p> <pre><code class="javascript">    this.sc = keydownValue         .filter(value =&gt; value === 'ARROWLEFT')         .subscribe(() =&gt; this.moveLeft())     this.sd = keydownValue         .filter(value =&gt; value === 'ARROWRIGHT')         .subscribe(() =&gt; this.moveRight())         moveLeft = () =&gt; this.state.pos &gt; 0 &amp;&amp;        this.setState({...this.state, pos: this.state.pos - 1})       moveRight = () =&gt; this.state.pos !== this.state.value.length &amp;&amp;        this.setState({...this.state, pos: this.state.pos + 1})</code></pre> <p>最后是让光标跳到pos的处理,setSelectionRange本用于文字的选择，但如果前两个参数为一样的数值，可以达到让光标跳到指定位置的效果。</p> <pre><code class="javascript">    this.se = keydownValue.subscribe(() =&gt; this.goPos())     goPos = () =&gt; this.t.setSelectionRange(this.state.pos, this.state.pos)</code></pre> <hr/> <span class="directory"></span><h4 id="title-4">170624更新</h4> <p>原本的模式跟react关系较少，因此修改调整了一下，主要的变化是启用了Subject,setStateAsync，在这里先介绍一下。</p> <h5>Rx.Subject</h5> <p>Subject继承于Obserable和Observer,因此同时具有Obserable和Observer两者的方法。通过来自于Observable的multicast方法可以挂载subject，并得到拥有相同执行环境的多路的新的Observable，关于他的订阅实际上是挂载在subject上。最后需要手动connect。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://segmentfault.com/a/1190000005069851"  rel="nofollow"> RxJS 核心概念之Subject</a>，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://ithelp.ithome.com.tw/articles/10188750?sc=iThomeR"  rel="nofollow">30 天精通 RxJS(24): Observable operators - multicast, refCount, publish, share</a></p> <pre><code class="javascript">var source = Rx.Observable.from([1, 2, 3]); var multicasted = source.multicast(new Rx.Subject())  // 通过`subject.subscribe({...})`订阅Subject的Observer： multicasted.subscribe({   next: (v) =&gt; console.log('observerA: ' + v) }); multicasted.subscribe({   next: (v) =&gt; console.log('observerB: ' + v) });  // 让Subject从数据源订阅开始生效： multicasted.connect();</code></pre> <p>其实可以用refCount来避免connect,用publish来代替 <code>multicast(new Rx.Subject())</code>,最后用share代替publish 和 refCount，因此代码可以写成</p> <pre><code class="javascript">var multicasted = source.share() </code></pre> <h5>setStateAsync</h5> <p>组件改为受控组件之后，setState中的异步特性展示了出来，setState后的下一步获取setState并不是最新的state，影响了程序的正常使用。<br />例如之前的新增函数的订阅。后面的inserValue和setColon都是需要利用最新的state来进行判断的。</p> <pre><code class="js">    this.sa = keydownValue       .filter(value =&gt; value.length === 1 &amp;&amp; value.match(/[0-9A-F]/))         .subscribe(value =&gt; {           this.setColon('before');           this.insertValue(value);            this.setColon();           this.setDomValue()         })</code></pre> <p>可以在setState的第二个参数中传入回调函数来解决这个问题,于是函数变成了这样，一层又一层的回调，十分不美观</p> <pre><code class="js">this.sa = keydownValue   .filter(value =&gt; value.length === 1 &amp;&amp; value.match(/[0-9A-F]/))     .subscribe(value =&gt; {       this.setColon('before', () =&gt; {         this.insertValue(value, () =&gt; {           this.setColon()         })       })     })     </code></pre> <p>接着在网上找到了setStateAsync的函数,原理就是将setState转换成promise的形式，接着就能愉快的使用async await的语法来修改state了。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/24781259"  rel="nofollow">React中setState同步更新策略</a></p> <pre><code class="js">  setStateAsync = state =&gt; new Promise(resolve =&gt; this.setState(state,resolve))</code></pre> <h5>实际的调整</h5> <p>在componentDidMount中把keydownValue设置为同时具有Observable和Observe的方法的Subject，他一方面可以使用Observer的onNext方法来添加新的数据，另一方面可以继续使用Observable的操作符来对数据进行处理。</p> <pre><code class="js">this.keydownValue = new Rx.Subject() let multicasted = this.keydownValue.map(e =&gt; e.key.toUpperCase()).share() this.sa = multicasted   .filter(value =&gt; value.length === 1 &amp;&amp; value.match(/[0-9A-F]/))     .subscribe(async value =&gt; {     await this.setColon('before')     await this.insertValue(value)     await this.setColon()     this.goPos()   }) //下略    </code></pre> <p>组件的render函数修改为</p> <pre><code class="js">  &lt;div className="App"&gt;       &lt;input type="text" onKeyDown={this.handleE} value={this.state.value} ref="t"/&gt;   &lt;/div&gt;</code></pre> <p>handleE函数继续禁止默认事件，调用了新设置的Subject（keydownValue）的onNext方法，可以使得绑定在keydownValue上的订阅获得数据</p> <pre><code class="js">  handleE = e =&gt; {e.preventDefault();this.keydownValue.onNext(e)}</code></pre> </div></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-81939.htm">宠物批发零售（宠物批发零售网站）</a></p>
                                        <p>下一个：<a href="/news/article-82671.htm">Java 面试之线程与锁</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-61703.htm" title="中国兽药平台（中国兽药网查询网）">中国兽药平台（中国兽药网查询网）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-2-shadowrocket-node.htm" title="「2月2日」最高速度21.1M/S，2025年Shadowrocket/SSR/Clash/V2ray每天更新免费机场订阅链接">「2月2日」最高速度21.1M/S，2025年Shadowrocket/SSR/Clash/V2ray每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-22-free-clash.htm" title="「1月22日」最高速度20.5M/S，2025年Clash/SSR/Shadowrocket/V2ray每天更新免费机场订阅链接">「1月22日」最高速度20.5M/S，2025年Clash/SSR/Shadowrocket/V2ray每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-15-free-clash.htm" title="「3月15日」最高速度22.5M/S，2025年V2ray/SSR/Shadowrocket/Clash每天更新免费机场订阅链接">「3月15日」最高速度22.5M/S，2025年V2ray/SSR/Shadowrocket/Clash每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-47552.htm" title="北京宠爱国际动物医疗机构地址（北京宠爱国际动物医疗机构地址查询）">北京宠爱国际动物医疗机构地址（北京宠爱国际动物医疗机构地址查询）</a></li>
                        <li class="py-2"><a href="/news/article-59948.htm" title="Halo 开源项目学习（六）：事件监听机制_在线工具">Halo 开源项目学习（六）：事件监听机制_在线工具</a></li>
                        <li class="py-2"><a href="/news/article-52169.htm" title="芭比堂宠物医院（芭比堂宠物医院眼科中心）">芭比堂宠物医院（芭比堂宠物医院眼科中心）</a></li>
                        <li class="py-2"><a href="/news/article-48028.htm" title="国产品牌十大宠物食品排行榜前十名（国内十大宠物食品品牌）">国产品牌十大宠物食品排行榜前十名（国内十大宠物食品品牌）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-clash-v2ray-ss-ssr.htm" title="「1月20日」最高速度19.3M/S，2025年V2ray/Clash/Shadowrocket/SSR每天更新免费机场订阅链接">「1月20日」最高速度19.3M/S，2025年V2ray/Clash/Shadowrocket/SSR每天更新免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-12-clash-node-daily-updates.htm" title="「3月12日」最高速度19.9M/S，2025年Clash/Shadowrocket/SSR/V2ray每天更新免费机场订阅链接">「3月12日」最高速度19.9M/S，2025年Clash/Shadowrocket/SSR/V2ray每天更新免费机场订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">86</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p class="copyrights-text mb-3 mb-lg-0">
                          TodayClashNode今日订阅站 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/website/js/frontend/todayclashnode/jquery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/website/js/frontend/todayclashnode/lightbox2/js/lightbox.js"></script>
    <script src="/assets/website/js/frontend/todayclashnode/front.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>